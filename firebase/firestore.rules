rules_version = '2';
service cloud.firestore {
  function isAuthUser(auth, userId){
    return auth != null && auth.uid == userId
  }

  function isValidUserSchema(user){
    return user.size() == 6
      && 'id' in user && user.id is string && user.id == request.auth.uid
      && 'email' in user && user.email is string
      && 'icon_url' in user && user.icon_url is string
      && 'name' in user && user.name is string
      && 'role' in user && user.role is string
      && 'level' in user && user.level is string
  }

  function isValidUser(user){
    return isValidUserSchema(user)
  }

  match /databases/{database}/documents {
    match /users/{uid} {
      allow read: if isAuthUser(request.auth, uid);
      allow create, update: if isAuthUser(request.auth, uid) && isValidUser(request.resource.data);
      allow delete: if isAuthUser(request.auth, uid);
    }

    match /organizations/{document=**} {
      allow read, write: if request.time < timestamp.date(2020, 7, 30);
    }
  }
}
